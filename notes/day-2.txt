asynchronous programming APIs: 
Promise
3rd party APIs: 
	Reactive Extensions

Angular:
	Angular JS => 1.x and Angular => 2.0

1. SPA => Single Page Application
2. Client side framework 
3. talks about creating series of components
4. DI framework
5. services => for common logic used across components
6. pipes => a place for data transformation
7. routing mechanism
8. data binding => pass data to UI (design) from  code and vice versa
9. modules
etc.

CLI (Command Line Interface) tool to create angular application: Angular CLI
package name: @angular/cli
command: >npm i @angular/cli --location=global
executable: ng
global installation path: C:\Users\<user-name>\AppData\Roaming\npm

command to create a new angular app:
>ng new first-app


Angular Things:
Thing					type				decorator function
---------------------------------------------------------
a. component		class				@Component({metadata about component})
b. pipe				class				@Pipe({metadata about component})
d. directive		class				@Directive({metadata about component})

d. module			class				@NgModule({metadata about component})

e. service			class				[@Injectable({metadata about service})]

binding:

1. data binding:
passing data from component code to its view
a. interpolation
syntax: {{data}}
b. property binding: (does not convert the data to string while binding)
syntax:
<hhtml-element [attribute]="data">

2. event binding:
passing data from component view to its code
syntax:
<html-element (event-name)="method(data)">

template reference variable: reference to the instance of the template (on which yiu are declaring the variable)
<html-element #var-name>

directives:
	a. structural directive => used like an attribute of an element but, manipulates the DOM (document object model) 
		example: *ngFor, *ngIf, *ngIfElse, *ngSwitch
	b. attribute directive => they are used like an attribute of an element but does not manipulate the DOM
		example: ngClass, ngStyle etc.
	c. component directive (Component) => only directive with a "view". used like an HTML tag NOT like an attribute
		example: @Component() AppComponent

ngFor	=>
class name: NgForOfDirective
module name: CommonModule

@NgModule({
	imports:[CommonModule]
})
export class BrowserModule{
}



@NgModule({
	declarations:[NgForOfDirective]
})
export class CommonModule{
}

@Directive({
	selector:'[ngFor]'
})
export class NgForOfDirective{
	method(expression){
		return template
	}
}





