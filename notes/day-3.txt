src
	app
		app.component.ts
		app.component.html
		app.component.css
		app.component.spec.ts
		app.module.ts

		data
			products.ts (products array)

		models
			product.ts (product interface)

		products (folder)
			products.module.ts (file)

			components (folder)
				
				product-list (folder)
					product-list.component.ts
					product-list.component.html
					product-list.component.css

				add-product (folder)
					add-product.component.ts
					add-product.component.html
					add-product.component.css

				update-product (folder)
					update-product.component.ts
					update-product.component.css
					update-product.component.html

			services (folder)
					products.service.ts

			pipes (folder)
					product-filter.pipe.ts

			directives (folder)

		orders
			orders.module.ts
			components (folder)
			services (folder)
			pipes (folder)
			directives (folder)


passing data from nested (child) to its parent component:
1. create an event for the nested (child) component
2. fire the event and emit the data
3. in the parent component's design bind the event of the nested (child) component (filterTextChanged) with the method of the parent component class [updateFilterText]


@Pipe({
	name:'uppercase'
})
export class UppercasePipe{
	transform(input:any){
	}
}


{{p.productName|uppercase}}


@Pipe({
	name:'currency'
})
export class CurrencyPipe{
	transform(input:any,...args:any[]){
	}
}

{{p.price|   currency    :'INR':::}}


Service and DI:
	asset level [component/pipe/directive/service] => an instance of service
	feature module level: an instance of service
	application/root module level:  an instance of service

HTTP requests from Angular application:
built-in service class: HttpClient
module name: HttpClientModule

instance methods:
get(url), post(), put(), delete(), ....
return type: Observable


component creation and destruction
	a. nested component:
		1. when the parent of the nested component gets destroyed
		2. when the nested component is conditionally rendered (when appears - created, when disappears - destroyed)
	b. routing component: when you visit the route, component is created and when you navigate away from the route, the component destroyed

changes => after the constructor, the very first time, and next time onwards this is the only event that gets fired

init		=> after the changes event for the very first time when component object is created and NEVER gets fired afterwards 

destroy


event-name			interface-name				method-name			
----------------------------------------------------------
X							OnX							ngOnX
init						OnInit						ngOnInit








	