Routing: angular provides client-side routing

module: RouterModule
services: Router, ActivatedRoute
directive: 
component: router-outlet
class: Route, Routes

create route
Route => path and component

http://localhost:4200/products => PLC [FPC]
http://localhost:4200/products/1 => PDC 
http://localhost:4200/products/add => APC
http://localhost:4200/products/update/1 => UPC

route path
<path-name>/:<route-parameter>
products/:id => {id:1}

categories/:cid/products/:pid 
categories/1/products/2 => {cid:1, pid:2}

put the routes in the Route[]
Route[] => Routes
type Routes = Route[]

register the routes with Router engine:
RouterModule.forRoot(array of Route objects)

feature-module => *.module.ts => 
separate routing module => *-routing.module.ts

http://localhost:4200 or http://localhost:4200 => Home
Home, 
PageNotFound
DashBoard


form data handling:
package: @angular/forms
module: FormsModule
directives: ngForm, ngModel etc.
validator directives: required, email, minLength, maxLength, min, max

a. template-driven form: 
	<form ngForm>
		<input ngModel>
	</form>
b. reactive form
	const pwd = new FormControl()
	const frm = new FormGroup({ password: pwd})


<form ngForm #frm="ngForm">
    <div>
        <label for="txtValue">Enter: &nbsp;</label>
        <!-- <input type="text" id="txtValue" [value]="inputData" (keyup)="setInputData(inputdata.value)" #inputdata> -->
        <!-- <input type="text" id="txtValue" ngModel #inputref="ngModel" name="valueInput"> -->
        <input type="text" id="txtValue" [(ngModel)]="inputData" name="valueInput1">
    </div>

    <div>
        <label for="txtValue2">Enter: &nbsp;</label>
        <input type="text" id="txtValue2" [(ngModel)]="inputData2" name="valueInput2">
    </div>
    <div>
        <button type="submit" (click)="submit(frm)">Submit</button>
    </div>
</form>











